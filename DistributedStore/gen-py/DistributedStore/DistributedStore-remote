#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from DistributedStore import DistributedStore
from DistributedStore.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void write(Data data, string transactionId)')
    print('  void writeToAllReplicas(i32 key, string value, i32 consistency)')
    print('  void setWriteStatus(string transactionId, MsgWrite msg)')
    print('  void read(Data data, string transactionId)')
    print('  string readToAllReplicas(Data data, i32 consistency)')
    print('  void setReadStatus(string transactionId, MsgRead msg)')
    print('  void setReplicationtable( node_list)')
    print('   getReplicas()')
    print('  void writeRepair( dataHints, string transId, NodeID coordinator)')
    print('  void setWriteRepair(string transId, MsgWriteRepair msg)')
    print('  void readRepair(Data data)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = DistributedStore.Client(protocol)
transport.open()

if cmd == 'write':
    if len(args) != 2:
        print('write requires 2 args')
        sys.exit(1)
    pp.pprint(client.write(eval(args[0]), args[1],))

elif cmd == 'writeToAllReplicas':
    if len(args) != 3:
        print('writeToAllReplicas requires 3 args')
        sys.exit(1)
    pp.pprint(client.writeToAllReplicas(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'setWriteStatus':
    if len(args) != 2:
        print('setWriteStatus requires 2 args')
        sys.exit(1)
    pp.pprint(client.setWriteStatus(args[0], eval(args[1]),))

elif cmd == 'read':
    if len(args) != 2:
        print('read requires 2 args')
        sys.exit(1)
    pp.pprint(client.read(eval(args[0]), args[1],))

elif cmd == 'readToAllReplicas':
    if len(args) != 2:
        print('readToAllReplicas requires 2 args')
        sys.exit(1)
    pp.pprint(client.readToAllReplicas(eval(args[0]), eval(args[1]),))

elif cmd == 'setReadStatus':
    if len(args) != 2:
        print('setReadStatus requires 2 args')
        sys.exit(1)
    pp.pprint(client.setReadStatus(args[0], eval(args[1]),))

elif cmd == 'setReplicationtable':
    if len(args) != 1:
        print('setReplicationtable requires 1 args')
        sys.exit(1)
    pp.pprint(client.setReplicationtable(eval(args[0]),))

elif cmd == 'getReplicas':
    if len(args) != 0:
        print('getReplicas requires 0 args')
        sys.exit(1)
    pp.pprint(client.getReplicas())

elif cmd == 'writeRepair':
    if len(args) != 3:
        print('writeRepair requires 3 args')
        sys.exit(1)
    pp.pprint(client.writeRepair(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'setWriteRepair':
    if len(args) != 2:
        print('setWriteRepair requires 2 args')
        sys.exit(1)
    pp.pprint(client.setWriteRepair(args[0], eval(args[1]),))

elif cmd == 'readRepair':
    if len(args) != 1:
        print('readRepair requires 1 args')
        sys.exit(1)
    pp.pprint(client.readRepair(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
